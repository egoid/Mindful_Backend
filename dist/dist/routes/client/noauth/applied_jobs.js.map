{"version":3,"sources":["../../../../routes/client/noauth/applied_jobs.js"],"names":["_","require","async","express","db","router","Router","exports","post","create_applied_jobs","update_applied_jobs","delete","delete_applied_jobs","_extract_job_def","req","company_id","body","applied_job_id","applied_job_type_id","employer_id","user","employee_id","status","reviewed_by_id","res","sendStatus","job_values","connection","series","done","getConnection","error","conn","console","queryWithConnection","columns","values","each","Object","keys","column_name","count","push","sql","join","repeat","length","slice","results","insertId","commit","result","rollback","send","applied_job_values","params","connectAndQuery","affectedRows","id"],"mappings":"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","file":"applied_jobs.js","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar async = require('async');\nvar express = require('express');\nvar db = require('../../../../mysql_db_prod.js');\n\nvar router = new express.Router();\nexports.router = router;\n\n/**\n *  ROUTES\n */\nrouter.post('/1/applied_jobs', create_applied_jobs);\nrouter.post('/1/applied_jobs/:applied_jobs_id', update_applied_jobs);\nrouter.delete('/1/applied_jobs/:applied_jobs_id', delete_applied_jobs);\n\n/**\n * Description:  Applied jobs parameters from the request\n * @param req\n * @returns {{company_id: *, applied_job_id: *, applied_job_type_id: *, employer_id: *, employee_id: *, status, reviewed_by_id: *}}\n * @private\n */\nfunction _extract_job_def(req) {\n\treturn {\n\t\tcompany_id: req.body.company_id,\n\t\tapplied_job_id: req.body.applied_job_id,\n\t\tapplied_job_type_id: req.body.applied_job_type_id,\n\t\temployer_id: req.user.employer_id,\n\t\temployee_id: req.user.employee_id,\n\t\tstatus: req.user.status,\n\t\treviewed_by_id: req.user.reviewed_by_id\n\n\t};\n}\n\nfunction create_applied_jobs(req, res) {\n\n\tif (!req.user.applied_job_id && !req.user.employer_id) {\n\t\tres.sendStatus(400);\n\t\treturn;\n\t}\n\n\tvar job_values = _extract_job_def(req);\n\tvar connection = void 0;\n\n\tasync.series([function (done) {\n\t\tdb.getConnection(function (error, conn) {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(\"create_applied_jobs: sql err:\", error);\n\t\t\t}\n\t\t\tconnection = conn;\n\t\t\tdone(error);\n\t\t});\n\t}, function (done) {\n\n\t\tdb.queryWithConnection(connection, \"START TRANSACTION\", [], function (error) {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(\"create_applied_jobs: sql err:\", error);\n\t\t\t}\n\t\t\tdone(error);\n\t\t});\n\t}, function (done) {\n\n\t\tvar columns = [];\n\t\tvar values = [];\n\n\t\t_.each(Object.keys(job_values), function (column_name, count) {\n\t\t\tcolumns.push(column_name);\n\t\t\tvalues.push(job_values[column_name]);\n\t\t});\n\n\t\tvar sql = \"INSERT INTO applied_jobs (\" + columns.join(',') + \")\" + \" VALUES (\" + \"?,\".repeat(values.length).slice(0, -1) + \")\";\n\t\tdb.queryWithConnection(connection, sql, values, function (error, results) {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(\"create_applied_jobs: sql err:\", error);\n\t\t\t}\n\t\t\tdone(error, results.insertId);\n\t\t});\n\t}, function (done) {\n\t\tdb.commit(connection, done);\n\t}], function (error, result) {\n\t\tif (error) {\n\t\t\tdb.rollback(connection, function () {});\n\t\t\tconsole.error(\"create_applied_jobs: sql err:\", error);\n\t\t\tres.sendStatus(500);\n\t\t} else {\n\t\t\tres.status(200).send(result);\n\t\t}\n\t});\n}\nfunction update_applied_jobs(req, res) {\n\tvar applied_job_values = _extract_job_def(req);\n\tvar applied_job_id = req.params.applied_job_id;\n\n\tif (!applied_job_values.company_id || !applied_job_values.applied_job_type_id) {\n\t\tres.status(400).send(\"When updating a job, company, job roles, and job types cannot be created.\");\n\t} else {\n\t\tvar sql = \"UPDATE applied_jobs SET ? WHERE applied_job_id = ? AND employer_id = ?\";\n\t\tdb.connectAndQuery({ sql: sql, values: [applied_job_values, applied_job_id, req.user.employer_id] }, function (error, results) {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(\"update_applied_jobs: sql err:\", error);\n\t\t\t\tres.sendStatus(500);\n\t\t\t} else {\n\t\t\t\tif (results.affectedRows < 1) {\n\t\t\t\t\tres.sendStatus(404);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(200).send({ id: applied_job_id });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\nfunction delete_applied_jobs(req, res) {\n\tvar values = [req.params.applied_job_id, req.user.employer_id];\n\tvar sql = \"DELETE FROM applied_jobs WHERE applied_job_id = ? AND employer_id = ?\";\n\tdb.connectAndQuery({ sql: sql, values: values }, function (error, results) {\n\t\tif (error) {\n\t\t\tconsole.error(\"delete_applied_jobs: sql err:\", error);\n\t\t\tres.sendStatus(500);\n\t\t} else if (results.affectedRows < 1) {\n\t\t\tres.sendStatus(404);\n\t\t} else {\n\t\t\tres.sendStatus(200);\n\t\t}\n\t});\n}\n//# sourceMappingURL=applied_jobs.js.map"]}