{"version":3,"sources":["../../../../../routes/client/auth/employer/job.js"],"names":["_","require","async","express","db","router","Router","exports","post","create_job","update_job","delete","delete_job","_extract_job_def","req","company_id","body","job_role_id","job_type_id","employer_id","user","title","location","pay_rate_min","pay_rate_max","min_gpa","description","external_url","posted_at","takedown_at","job_schedule_id","res","sendStatus","job_values","connection","latitude","longitude","radius_coordinates","series","done","getConnection","error","conn","console","queryWithConnection","geocoder","geocode","then","formattedAddress","catch","err","each","Object","keys","LABEL_TO_RADIUS","label","radius","_radius_lat_long_calc","columns","values","column_name","count","push","sql","join","repeat","length","slice","results","insertId","commit","result","rollback","status","send","job_id","params","connectAndQuery","affectedRows","id"],"mappings":"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","file":"job.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst async = require('async');\nconst express = require('express');\nconst db = require('../../../../mysql_db_prod.js');\n\nconst router = new express.Router();\nexports.router = router;\n\nrouter.post('/1/job', create_job);\nrouter.post('/1/job/:job_id', update_job);\nrouter.delete('/1/job/:job_id', delete_job);\n\nfunction _extract_job_def(req) {\n    return {\n\tcompany_id: req.body.company_id,\n\tjob_role_id: req.body.job_role_id,\n\tjob_type_id: req.body.job_type_id,\n\temployer_id: req.user.employer_id,\n\ttitle: req.body.title,\n\tlocation: req.body.location || null,\n\tpay_rate_min: req.body.pay_rate_min || null,\n\tpay_rate_max: req.body.pay_rate_max || null,\n\tmin_gpa: req.body.min_gpa || null,\n\tdescription: req.body.description || null,\n\texternal_url: req.body.external_url || null,\n\tposted_at: req.body.posted_at || null,\n\ttakedown_at: req.body.takedown_at || null,\n\tjob_schedule_id: req.body.job_schedule_id || null\n    };\n}\n\nfunction create_job(req, res) {\n    if (!req.user.employer_id) {\n\tres.sendStatus(400);\n\treturn;\n    }\n    \n    const job_values = _extract_job_def(req);\n    \n    let connection;\n    let latitude = null;\n    let longitude = null;\n    let radius_coordinates = {};\n    \n    async.series([\n\t    (done) => {\n\t\tdb.getConnection((error, conn) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_job: sql err:\", error);\n\t\t    }\n\t\t    connection = conn;\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\tdb.queryWithConnection(connection, \"START TRANSACTION\", [], (error) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_job: sql err:\", error);\n\t\t    }\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\tif (job_values.location) {\n\t\t    geocoder.geocode(job_values.location)\n\t\t\t.then((res) => {\n\t\t\t    job_values.location = res[0].formattedAddress;\n\t\t\t    latitude = res[0].latitude;\n\t\t\t    longitude = res[0].longitude;\n\t\t\t    done();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t    console.error(\"create_job: geocoding err:\", err);\n\t\t\t    done(err);\n\t\t\t});\n\t\t} else {\n\t\t    done();\n\t\t}\n\t    },\n\t    (done) => {\n\t\t_.each(Object.keys(LABEL_TO_RADIUS), (label) => {\n\t\t    const radius = LABEL_TO_RADIUS[label];\n\t\t    radius_coordinates[label] = _radius_lat_long_calc(latitude, longitude, radius);\n\t\t});\n\t\tdone();\n\t    },\n\t    (done) => {\n\t\tconst columns = [];\n\t\tconst values = [];\n\t\t\n\t\t_.each(Object.keys(job_values), (column_name, count) => {\n\t\t    columns.push(column_name);\n\t\t    values.push(job_values[column_name]);\n\t\t});\n\t\t\n\t\t// Latitude is the Y axis, longitude is the X axis\n\t\t_.each(Object.keys(radius_coordinates), (label) => {\n\t\t    columns.push('latitude_lower_' + label);\n\t\t    columns.push('longitude_lower_' + label);\n\t\t    columns.push('latitude_upper_' + label);\n\t\t    columns.push('longitude_upper_' + label);\n\t\t    \n\t\t    values.push(radius_coordinates[label][3]);\n\t\t    values.push(radius_coordinates[label][2]);\n\t\t    values.push(radius_coordinates[label][1]);\n\t\t    values.push(radius_coordinates[label][0]);\n\t\t});\n\t\t\n\t\tcolumns.push('latitude, longitude');\n\t\tvalues.push(latitude, longitude);\n\t\t\n\t\tconst sql = \"INSERT INTO job (\" + columns.join(',') + \")\" + \" VALUES (\" + \"?,\".repeat(values.length).slice(0, -1) + \")\";\n\t\tdb.queryWithConnection(connection, sql, values, (error, results) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_job: sql err:\", error);\n\t\t    }\n\t\t    done(error, results.insertId);\n\t\t});\n\t    },\n\t    (done) => {\n\t\tdb.commit(connection, done);\n\t    },\n\t],\n\t(error, result) => {\n\t    if (error) {\n\t\tdb.rollback(connection, () => {});\n\t\tconsole.error(\"create_job: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tres.status(200).send(result);\n\t    }\n\t});\n}\nfunction update_job(req, res) {\n    const job_values = _extract_job_def(req);\n    const job_id = req.params.job_id;\n    \n    if (!job_values.company_id || !job_values.job_role_id || !job_values.job_type_id) {\n\tres.status(400).send(\"When updating a job, company, job roles, and job types cannot be created.\");\n    } else {\n\tconst sql = \"UPDATE job SET ? WHERE job_id = ? AND employer_id = ?\";\n\tdb.connectAndQuery({sql, values: [job_values, job_id, req.user.employer_id]}, (error, results) => {\n\t    if (error) {\n\t\tconsole.error(\"update_job: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tif (results.affectedRows < 1) {\n\t\t    res.sendStatus(404);\n\t\t} else {\n\t\t    res.status(200).send({id: job_id});\n\t\t}\n\t    }\n\t});\n    }\n}\nfunction delete_job(req, res) {\n    const values = [req.params.job_id, req.user.employer_id];\n    const sql = \"DELETE FROM job WHERE job_id = ? AND employer_id = ?\";\n    db.connectAndQuery({sql, values}, (error, results) => {\n\tif (error) {\n\t    console.error(\"delete_job: sql err:\", error);\n\t    res.sendStatus(500);\n\t} else if (results.affectedRows < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.sendStatus(200);\n\t}\n    });\n}\n"]}