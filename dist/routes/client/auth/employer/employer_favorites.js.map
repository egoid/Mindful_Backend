{"version":3,"sources":["../../../../../routes/client/auth/employer/employer_favorites.js"],"names":["_","require","async","express","db","router","Router","exports","get","get_employer_favorites","post","create_employer_favorites","update_employer_favorites","delete","delete_employer_favorites","_extract_employer_favorite_def","req","company_id","body","employer_favorite_id","employer_id","user","employee_id","user_id","is_applicant","is_match","_extract_update_employer_favorite_def","res","query","sql","values","connectAndQuery","err","results","console","error","sendStatus","length","status","send","job_values","connection","series","done","getConnection","conn","queryWithConnection","columns","each","Object","keys","column_name","count","push","join","repeat","slice","insertId","commit","result","rollback","employer_favorite_values","params","affectedRows","id"],"mappings":"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","file":"employer_favorites.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst async = require('async');\nconst express = require('express');\nconst db = require('../../../../mysql_db_prod.js');\n\nconst router = new express.Router();\nexports.router = router;\n\n/**\n *  ROUTES\n */\nrouter.get('/1/employer_favorites', get_employer_favorites);\nrouter.post('/1/employer_favorites', create_employer_favorites);\nrouter.post('/1/employer_favorites/:employer_favorite_id', update_employer_favorites);\nrouter.delete('/1/employer_favorites/:employer_favorite_id', delete_employer_favorites);\n\n\n\n/**\n * Description:  Applied jobs parameters from the request\n * @param req\n * @returns {{company_id: *, employer_favorite_id: *, employer_favorite_type_id: *, employer_id: *, employee_id: *, status, reviewed_by_id: *}}\n * @private\n */\nfunction _extract_employer_favorite_def(req) {\n    \n    return {\n\tcompany_id: req.body.company_id,\n\temployer_favorite_id: req.body.employer_favorite_id,\n\temployer_id: (req.user.employer_id) ? req.user.employer_id : req.body.employer_id,\n\temployee_id: req.body.employee_id,\n\tuser_id: (req.user.user_id) ? req.user.user_id : req.body.user_id,\n\tis_applicant: req.body.is_applicant,\n\tis_match: req.body.is_match\n    };\n}\n\nfunction _extract_update_employer_favorite_def(req) {\n    return {\n\temployer_id: req.body.employer_id,\n\tis_applicant: req.body.is_applicant,\n\tis_match: req.body.is_match\n    };\n}\n\n\nfunction get_employer_favorites(req, res) {\n    \n    const employer_id = req.query.employer_id;\n    const sql = \"SELECT company_id, employer_favorite_id, employer_id, employee_id, user_id, is_applicant, is_match, date_added \" +\n\t\"FROM employer_favorites \" +\n\t\"WHERE employer_id  = ?\";\n    const values = [employer_id];\n    \n    db.connectAndQuery({sql, values}, (err, results) => {\n\tif(err) {\n\t    console.error(\"get_employer_favorites: sql err:\", err);\n\t    res.sendStatus(500);\n\t} else if(results.length < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.status(200).send(results);\n\t}\n    });\n    \n}\n\n\nfunction create_employer_favorites(req, res) {\n\n    if (!req.body.employer_favorite_id && !req.body.employer_id) {\n\tres.sendStatus(400);\n\treturn;\n    }\n    \n    const job_values = _extract_employer_favorite_def(req);\n    let connection;\n    \n    async.series([\n\t    (done) => {\n\t\tdb.getConnection((error, conn) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_employer_favorites: sql err:\", error);\n\t\t    }\n\t\t    connection = conn;\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\t\n\t\tdb.queryWithConnection(connection, \"START TRANSACTION\", [], (error) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_employer_favorites: sql err:\", error);\n\t\t    }\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\t\n\t\tconst columns = [];\n\t\tconst values = [];\n\t\t\n\t\t_.each(Object.keys(job_values), (column_name, count) => {\n\t\t    columns.push(column_name);\n\t\t    values.push(job_values[column_name]);\n\t\t});\n\t\t\n\t\tconst sql = \"INSERT INTO employer_favorites (\" + columns.join(',') + \")\" + \" VALUES (\" + \"?,\".repeat(values.length).slice(0, -1) + \")\";\n\t\tdb.queryWithConnection(connection, sql, values, (error, results) => {\n\t\t    \n\t\t    if (error) {\n\t\t\tconsole.error(\"create_employer_favorites: sql err:\", error);\n\t\t\tres.sendStatus(500);\n\t\t    } else {\n\t\t\tdone(error, results.insertId);\n\t\t    }\n\t\t});\n\t\t\n\t    },\n\t    (done) => {\n\t\tdb.commit(connection, done);\n\t    },\n\t],\n\t(error, result) => {\n\t    if (error) {\n\t\tdb.rollback(connection, () => {});\n\t\tconsole.error(\"create_employer_favorites: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tres.status(200).send(result);\n\t    }\n\t});\n}\nfunction update_employer_favorites(req, res) {\n    const employer_favorite_values = _extract_update_employer_favorite_def(req);\n    const employer_favorite_id = req.params.employer_favorite_id;\n    \n    if (!employer_favorite_values.employer_id || !employer_favorite_id) {\n\tres.status(400).send(\"When updating a job, company, job roles, and job types cannot be created.\");\n    } else {\n\tconst sql = \"UPDATE employer_favorites SET ? WHERE employer_favorite_id = ? AND employer_id = ?\";\n\tdb.connectAndQuery({sql, values: [employer_favorite_values, employer_favorite_id, req.body.employer_id]}, (error, results) => {\n\t    if (error) {\n\t\tconsole.error(\"update_employer_favorites: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tif (results.affectedRows < 1) {\n\t\t    res.sendStatus(404);\n\t\t} else {\n\t\t    res.status(200).send({id: employer_favorite_id});\n\t\t}\n\t    }\n\t});\n    }\n}\nfunction delete_employer_favorites(req, res) {\n    const values = [req.params.employer_favorite_id, req.body.employer_id];\n    const sql = \"DELETE FROM employer_favorites WHERE employer_favorite_id = ? AND employer_id = ?\";\n    db.connectAndQuery({sql, values}, (error, results) => {\n\tif (error) {\n\t    console.error(\"delete_employer_favorites: sql err:\", error);\n\t    res.sendStatus(500);\n\t} else if (results.affectedRows < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.sendStatus(200);\n\t}\n    });\n}\n"]}