{"version":3,"sources":["../../../../../routes/client/auth/employer/employer_messaging.js"],"names":["_","require","async","express","db","router","Router","exports","get","get_employer_messaging","post","create_employer_messaging","delete","delete_employer_messaging","_extract_employer_message_def","req","from_source_id","body","to_source_id","job_application_id","message","message_status","message_date","message_source","request_interview_date","res","query","sql","values","connectAndQuery","err","results","console","error","sendStatus","length","status","send","job_values","connection","series","done","getConnection","conn","queryWithConnection","columns","each","Object","keys","column_name","count","push","join","repeat","slice","log","insertId","commit","result","rollback","params","affectedRows"],"mappings":"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","file":"employer_messaging.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst async = require('async');\nconst express = require('express');\nconst db = require('../../../../mysql_db_prod.js');\n\nconst router = new express.Router();\nexports.router = router;\n\n/**\n *  ROUTES\n */\nrouter.get('/1/employer_messaging', get_employer_messaging);\nrouter.post('/1/employer_messaging', create_employer_messaging);\nrouter.delete('/1/employer_messaging/:job_application_id', delete_employer_messaging);\n\n/**\n *\n * @param req\n * @returns {{company_id: *, employer_message_id: *, applied_job_type_id: *, employer_id: *, employee_id: *, status: (*|string), reviewed_by_id: *}}\n * @private\n */\nfunction _extract_employer_message_def(req) {\n    return {\n\tfrom_source_id: req.body.from_source_id, // Todo:// Use Employer ID or User ID\n\tto_source_id: req.body.to_source_id, // Todo:// Use Employer ID or User ID\n\tjob_application_id: req.body.job_application_id,\n\tmessage: req.body.message,\n\tmessage_status: req.body.message_status,\n\tmessage_date: req.body.message_date,\n\tmessage_source: req.body.message_source, //Employer or Applicant Label (User ID)\n\trequest_interview_date: req.body.request_interview_date\n    };\n}\n\nfunction get_employer_messaging(req, res) {\n    \n    const job_application_id = req.query.job_application_id;\n    const sql = \" SELECT from_source_id, to_source_id, job_application_id, message, message_status, message_date, message_source, request_interview_date \" +\n\t\" FROM employer_messaging \" +\n\t\" WHERE job_application_id  = ?\";\n    const values = [job_application_id];\n    \n    db.connectAndQuery({sql, values}, (err, results) => {\n\tif (err) {\n\t    console.error(\"get_employer_messaging: sql err:\", err);\n\t    res.sendStatus(500);\n\t} else if (results.length < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.status(200).send(results);\n\t}\n    });\n    \n}\n\n\nfunction create_employer_messaging(req, res) {\n    \n    if (!req.body.from_source_id && !req.body.to_source_id) {\n\tres.sendStatus(400);\n\treturn;\n    }\n    \n    const job_values = _extract_employer_message_def(req);\n    let connection;\n    \n    async.series([\n\t    (done) => {\n\t\tdb.getConnection((error, conn) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_employer_messaging: sql err:\", error);\n\t\t    }\n\t\t    connection = conn;\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\t\n\t\tdb.queryWithConnection(connection, \"START TRANSACTION\", [], (error) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_employer_messaging: sql err:\", error);\n\t\t    }\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\t\n\t\tconst columns = [];\n\t\tconst values = [];\n\t\t\n\t\t_.each(Object.keys(job_values), (column_name, count) => {\n\t\t    columns.push(column_name);\n\t\t    values.push(job_values[column_name]);\n\t\t});\n\t\t\n\t\tconst sql = \"INSERT INTO employer_messaging (\" + columns.join(',') + \")\" + \" VALUES (\" + \"?,\".repeat(values.length).slice(0, -1) + \")\";\n\t\tconsole.log(sql);\n\t\t\n\t\tdb.queryWithConnection(connection, sql, values, (error, results) => {\n\t\t    \n\t\t    if (error) {\n\t\t\tconsole.error(\"create_employer_messaging: sql err:\", error);\n\t\t\tres.sendStatus(500);\n\t\t    } else {\n\t\t\tdone(error, results.insertId);\n\t\t    }\n\t\t});\n\t\t\n\t    },\n\t    (done) => {\n\t\tdb.commit(connection, done);\n\t    },\n\t],\n\t(error, result) => {\n\t    if (error) {\n\t\tdb.rollback(connection, () => {});\n\t\tconsole.error(\"create_employer_messaging: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tres.status(200).send(result);\n\t    }\n\t});\n}\n\nfunction delete_employer_messaging(req, res) {\n    const values = [req.params.from_source_id, req.body.job_application_id];\n    const sql = \"DELETE FROM employer_messaging WHERE employer_message_id = ? AND employer_id = ?\";\n    db.connectAndQuery({sql, values}, (error, results) => {\n\tif (error) {\n\t    console.error(\"delete_employer_messaging: sql err:\", error);\n\t    res.sendStatus(500);\n\t} else if (results.affectedRows < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.sendStatus(200);\n\t}\n    });\n}\n"]}