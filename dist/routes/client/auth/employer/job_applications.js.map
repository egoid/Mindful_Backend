{"version":3,"sources":["../../../../../routes/client/auth/employer/job_applications.js"],"names":["_","require","async","express","db","router","Router","exports","get","get_job_applications","post","create_job_applications","update_job_applications","delete","delete_job_applications","_extract_applied_job_def","req","company_id","body","applied_job_id","applied_job_type_id","employer_id","user","employee_id","status","reviewed_by_id","_extract_update_applied_job_def","res","query","sql","values","connectAndQuery","err","results","console","error","sendStatus","length","send","job_values","connection","series","done","getConnection","conn","queryWithConnection","columns","each","Object","keys","column_name","count","push","join","repeat","slice","insertId","commit","result","rollback","applied_job_values","params","affectedRows","id"],"mappings":"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","file":"job_applications.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst async = require('async');\nconst express = require('express');\nconst db = require('../../../../mysql_db_prod.js');\n\nconst router = new express.Router();\nexports.router = router;\n\n/**\n *  ROUTES\n */\nrouter.get('/1/job_applications', get_job_applications);\nrouter.post('/1/job_applications', create_job_applications);\nrouter.post('/1/job_applications/:applied_job_id', update_job_applications);\nrouter.delete('/1/job_applications/:applied_job_id', delete_job_applications);\n\n/**\n *\n * @param req\n * @returns {{company_id: *, applied_job_id: *, applied_job_type_id: *, employer_id: *, employee_id: *, status, reviewed_by_id: *}}\n * @private\n */\nfunction _extract_applied_job_def(req) {\n    \n    return {\n\tcompany_id: req.body.company_id,\n\tapplied_job_id: req.body.applied_job_id,\n\tapplied_job_type_id: req.body.applied_job_type_id,\n\temployer_id: (req.user.employer_id) ? req.user.employer_id : req.body.employer_id,\n\temployee_id: req.body.employee_id,\n\tstatus: req.body.status,\n\treviewed_by_id: req.body.reviewed_by_id\n\t\n    };\n}\n\nfunction _extract_update_applied_job_def(req) {\n    return {\n\temployer_id: req.body.employer_id,\n\tstatus: req.body.status,\n\treviewed_by_id: req.body.reviewed_by_id\n    };\n}\n\n\nfunction get_job_applications(req, res) {\n    \n    const employer_id = req.query.employer_id;\n    const sql = \"SELECT company_id, applied_job_id, applied_job_type_id, employer_id, employee_id,status, reviewed_by_id, added_date \" +\n\t\"FROM job_applications \" +\n\t\"WHERE employer_id  = ?\";\n    const values = [employer_id];\n    \n    db.connectAndQuery({sql, values}, (err, results) => {\n\tif (err) {\n\t    console.error(\"get_job_applications: sql err:\", err);\n\t    res.sendStatus(500);\n\t} else if (results.length < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.status(200).send(results);\n\t}\n    });\n    \n}\n\n\nfunction create_job_applications(req, res) {\n    \n    if (!req.body.applied_job_id && !req.body.employer_id) {\n\tres.sendStatus(400);\n\treturn;\n    }\n    \n    const job_values = _extract_applied_job_def(req);\n    let connection;\n    \n    async.series([\n\t    (done) => {\n\t\tdb.getConnection((error, conn) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_job_applications: sql err:\", error);\n\t\t    }\n\t\t    connection = conn;\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\t\n\t\tdb.queryWithConnection(connection, \"START TRANSACTION\", [], (error) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_job_applications: sql err:\", error);\n\t\t    }\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\t\n\t\tconst columns = [];\n\t\tconst values = [];\n\t\t\n\t\t_.each(Object.keys(job_values), (column_name, count) => {\n\t\t    columns.push(column_name);\n\t\t    values.push(job_values[column_name]);\n\t\t});\n\t\t\n\t\tconst sql = \"INSERT INTO job_applications (\" + columns.join(',') + \")\" + \" VALUES (\" + \"?,\".repeat(values.length).slice(0, -1) + \")\";\n\t\tdb.queryWithConnection(connection, sql, values, (error, results) => {\n\t\t    \n\t\t    if (error) {\n\t\t\tconsole.error(\"create_job_applications: sql err:\", error);\n\t\t\tres.sendStatus(500);\n\t\t    } else {\n\t\t\tdone(error, results.insertId);\n\t\t    }\n\t\t});\n\t\t\n\t    },\n\t    (done) => {\n\t\tdb.commit(connection, done);\n\t    },\n\t],\n\t(error, result) => {\n\t    if (error) {\n\t\tdb.rollback(connection, () => {});\n\t\tconsole.error(\"create_job_applications: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tres.status(200).send(result);\n\t    }\n\t});\n}\nfunction update_job_applications(req, res) {\n    const applied_job_values = _extract_update_applied_job_def(req);\n    const applied_job_id = req.params.applied_job_id;\n    \n    if (!applied_job_values.employer_id || !applied_job_id) {\n\tres.status(400).send(\"When updating a job, company, job roles, and job types cannot be created.\");\n    } else {\n\tconst sql = \"UPDATE job_applications SET ? WHERE applied_job_id = ? AND employer_id = ?\";\n\tdb.connectAndQuery({sql, values: [applied_job_values, applied_job_id, req.body.employer_id]}, (error, results) => {\n\t    if (error) {\n\t\tconsole.error(\"update_job_applications: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tif (results.affectedRows < 1) {\n\t\t    res.sendStatus(404);\n\t\t} else {\n\t\t    res.status(200).send({id: applied_job_id});\n\t\t}\n\t    }\n\t});\n    }\n}\nfunction delete_job_applications(req, res) {\n    const values = [req.params.applied_job_id, req.body.employer_id];\n    const sql = \"DELETE FROM job_applications WHERE applied_job_id = ? AND employer_id = ?\";\n    db.connectAndQuery({sql, values}, (error, results) => {\n\tif (error) {\n\t    console.error(\"delete_job_applications: sql err:\", error);\n\t    res.sendStatus(500);\n\t} else if (results.affectedRows < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.sendStatus(200);\n\t}\n    });\n}\n"]}