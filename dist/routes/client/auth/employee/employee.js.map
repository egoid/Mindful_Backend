{"version":3,"sources":["../../../../../routes/client/auth/employee/employee.js"],"names":["_","require","async","express","NodeGeocoder","db","router","Router","exports","GOOGLE_GEO_CONFIG","apiKey","formatter","httpAdapter","provider","geocoder","get","get_employee","get_employees_have_not_applied_to_jobs","post","create_employee","put","update_employee","req","res","sql","values","query","employee_id","connectAndQuery","error","results","console","sendStatus","length","status","send","user_id","user","school_id","body","location_name","transportation","tipi_score_id","headline","school_level","gpa","schedule_id","search_formatted","search_lat","search_long","series","done","geocode","then","formattedAddress","latitude","longitude","catch","err","insertId","id","UPDATABLE_COLS","update_values","location_latitude","location_longitude","each","col"],"mappings":"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","file":"employee.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst async = require('async');\nconst express = require('express');\nconst NodeGeocoder = require('node-geocoder');\nconst db = require('../../../../mysql_db_prod.js');\n\nconst router = new express.Router();\nexports.router = router;\n\nconst GOOGLE_GEO_CONFIG = {\n    apiKey: 'AIzaSyAJwf4JXpI9MRGuZdYcOFT9-nq5lzbuPKI',\n    formatter: null,\n    httpAdapter: 'https',\n    provider: 'google',\n};\nconst geocoder = NodeGeocoder(GOOGLE_GEO_CONFIG);\n\nrouter.get('/1/employee', get_employee);\nrouter.get('/1/employees_not_applied_jobs', get_employees_have_not_applied_to_jobs);\nrouter.post('/1/employee', create_employee);\nrouter.put('/1/employee', update_employee);\n\n/**** EMPLOYEE ENDPOINTS ****/\nfunction get_employee(req, res) {\n    const sql = \"SELECT *\" +\n\t\"FROM employee \" +\n\t\"JOIN user USING(user_id) \" +\n\t\"WHERE employee_id=?\";\n    const values = [req.query.employee_id];\n    \n    db.connectAndQuery({sql, values}, (error, results) => {\n\tif (error) {\n\t    console.error(\"get_employee: sql err:\", error);\n\t    res.sendStatus(500);\n\t} else if (results.length < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.status(200).send(results[0]);\n\t}\n    });\n}\nfunction create_employee(req, res) {\n    const user_id = req.user.user_id;\n    if (!user_id) {\n\tres.status(400).send('User ID required');\n    } else {\n\tconst school_id = req.body.school_id || null;\n\tconst location_name = req.body.location_name || null;\n\tconst transportation = req.body.transportation || null;\n\tconst tipi_score_id = req.body.tipi_score_id || null;\n\tconst headline = req.body.headline || null;\n\tconst school_level = req.body.school_level || null;\n\tconst gpa = req.body.gpa || null;\n\tconst schedule_id = req.body.schedule_id || null;\n\t\n\tlet search_formatted;\n\tlet search_lat;\n\tlet search_long;\n\tlet employee_id;\n\t\n\tasync.series([\n\t\t(done) => {\n\t\t    if (location_name) {\n\t\t\tgeocoder.geocode(location_name)\n\t\t\t    .then((res) => {\n\t\t\t\tsearch_formatted = res[0].formattedAddress;\n\t\t\t\tsearch_lat = res[0].latitude;\n\t\t\t\tsearch_long = res[0].longitude;\n\t\t\t\tdone();\n\t\t\t    })\n\t\t\t    .catch((err) => {\n\t\t\t\tconsole.error(\"create_employee: geocoder err:\", err);\n\t\t\t\tdone(err);\n\t\t\t    });\n\t\t    } else {\n\t\t\tdone();\n\t\t    }\n\t\t},\n\t\t(done) => {\n\t\t    const sql = \"INSERT INTO employee \" +\n\t\t\t\"(user_id, school_id, location_name, location_latitude, \" +\n\t\t\t\"location_longitude, transportation, tipi_score_id, \" +\n\t\t\t\"headline, school_level, gpa, schedule_id) \" +\n\t\t\t\"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\t\t    \n\t\t    const values = [\n\t\t\tuser_id, school_id, search_formatted, search_lat, search_long,\n\t\t\ttransportation, tipi_score_id, headline, school_level, gpa, schedule_id\n\t\t    ];\n\t\t    \n\t\t    db.connectAndQuery({sql, values}, (error, results) => {\n\t\t\tif (error) {\n\t\t\t    console.error(\"create_employee: sql err:\", error);\n\t\t\t} else {\n\t\t\t    employee_id = results.insertId;\n\t\t\t}\n\t\t\t\n\t\t\tdone(error);\n\t\t    });\n\t\t}\n\t    ],\n\t    (error) => {\n\t\tif (error) {\n\t\t    res.sendStatus(500);\n\t\t} else {\n\t\t    res.status(200).send({id: employee_id});\n\t\t}\n\t    });\n    }\n}\n\n\nfunction get_employees_have_not_applied_to_jobs(req, res) {\n    \n    const employee_id = req.query.employee_id;\n    const sql = \"SELECT company_id, applied_job_id, applied_job_type_id, employer_id, employee_id,status, reviewed_by_id, added_date \" +\n\t\"FROM applied_jobs \" +\n\t\"WHERE employer_id  = ?\";\n    const values = [employee_id];\n    \n    db.connectAndQuery({sql, values}, (err, results) => {\n\tif (err) {\n\t    console.error(\"get_applied_jobs: sql err:\", err);\n\t    res.sendStatus(500);\n\t} else if (results.length < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.status(200).send(results);\n\t}\n    });\n    \n}\n\nfunction update_employee(req, res) {\n    const employee_id = req.user.employee_id;\n    \n    const location_name = req.body.location_name || null;\n    const UPDATABLE_COLS = [\n\t'school_id', 'transportation', 'tipi_score_id', 'headline', 'school_level',\n\t'gpa', 'schedule_id'\n    ];\n    \n    let search_formatted;\n    let search_lat;\n    let search_long;\n    \n    const update_values = {};\n    \n    async.series([\n\t    (done) => {\n\t\tif (location_name) {\n\t\t    geocoder.geocode(location_name)\n\t\t\t.then((res) => {\n\t\t\t    update_values.location_name = res[0].formattedAddress;\n\t\t\t    update_values.location_latitude = res[0].latitude;\n\t\t\t    update_values.location_longitude = res[0].longitude;\n\t\t\t    done();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t    console.error(\"update_employee: geocoding err:\", err);\n\t\t\t    done(err);\n\t\t\t});\n\t\t} else {\n\t\t    done();\n\t\t}\n\t    },\n\t    (done) => {\n\t\t_.each(UPDATABLE_COLS, (col) => {\n\t\t    if (req.body[col]) {\n\t\t\tupdate_values[col] = req.body[col];\n\t\t    }\n\t\t});\n\t\t\n\t\tlet sql = \"UPDATE employee SET ? WHERE employee_id = ?\";\n\t\tconst values = [update_values, employee_id];\n\t\tdb.connectAndQuery({sql, values}, (error, results) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"update_employee: sql err:\", error);\n\t\t    }\n\t\t    done(error);\n\t\t});\n\t    }\n\t],\n\t(error) => {\n\t    if (error) {\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tres.sendStatus(200);\n\t    }\n\t});\n}\n"]}