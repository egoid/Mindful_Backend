{"version":3,"sources":["../../../../../routes/client/auth/employee/employee_job.js"],"names":["express","require","db","_","async","NodeGeocoder","router","Router","exports","GOOGLE_GEO_CONFIG","apiKey","formatter","httpAdapter","provider","geocoder","EMPLOYEE_JOB_STATUS","get","search_job","query_job","get_more_jobs","get_joblist_length","post","create_employee_job","delete","delete_employee_job","req","res","search_location","body","location","query","search_string","search","search_industry","industry_id","search_job_type","job_type_id","search_radius_label","radius","search_lat","search_long","search_formatted","result","Object","keys","LABEL_TO_RADIUS","indexOf","series","done","geocode","then","formattedAddress","latitude","longitude","catch","err","console","error","values","sql","length","push","company_id","String","page_number","connectAndQuery","nestTables","results","log","_make_job_from_results","sendStatus","status","send","industry","category","job_category","employee_id","user","job_id","interview_date","NULL","id","insertId","update_employee_job","employee_job_id","params","job_status","affectedRows","JOB_KEYS","COMPANY_KEYS","JOB_ROLE_KEYS","JOB_TYPE_KEYS","SKILL_KEYS","walk","bike","metro","car","job_ids","each","a_result","job","pick","job_role","job_type","company","skills","property_bag","JSON","parse","r","job_skill","skill_def","skill_type","job_skill_id","assign","job_schedule"],"mappings":"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","file":"employee_job.js","sourcesContent":["'use strict';\n\nconst express = require('express');\nconst db = require('../../../../mysql_db_prod.js');\nconst _ = require('lodash');\nconst async = require('async');\nconst NodeGeocoder = require('node-geocoder');\n\nconst router = new express.Router();\nexports.router = router;\n\n\nconst GOOGLE_GEO_CONFIG = {\n  apiKey: 'AIzaSyAJwf4JXpI9MRGuZdYcOFT9-nq5lzbuPKI',\n  formatter: null,\n  httpAdapter: 'https',\n  provider: 'google',\n};\nconst geocoder = NodeGeocoder(GOOGLE_GEO_CONFIG);\nconst EMPLOYEE_JOB_STATUS = ['saved','submitted','reviewed','interview','offer','pass'];\n\nrouter.get('/1/employee/job', search_job);\nrouter.get('/1/employee/job/search', query_job);\nrouter.get('/1/employee/job/more_jobs_by', get_more_jobs);\nrouter.get('/1/employee/job/job_list', get_joblist_length );\nrouter.post('/1/employee/job', create_employee_job);\n\nrouter.delete('/1/employee/job/:employee_job_id', delete_employee_job);\n\nfunction get_more_jobs(req,res) {\n  const search_location = req.body.location || req.query.location;\n  const search_string = req.body.search || req.query.search;\n  const search_industry = req.body.industry_id || req.query.industry_id;\n  const search_job_type = req.body.job_type_id || req.query.job_type_id;\n  let search_radius_label = req.body.radius || req.query.radius;\n\n  let search_lat;\n  let search_long;\n  let search_formatted;\n  let result;\n\n  if(Object.keys(LABEL_TO_RADIUS).indexOf(search_radius_label) < 0) {\n    search_radius_label = 'bike';\n  }\n\n  async.series([\n    (done) => {\n      geocoder.geocode(search_location)\n        .then((res) => {\n          search_formatted = res[0].formattedAddress;\n          search_lat = res[0].latitude;\n          search_long = res[0].longitude;\n          done();\n        })\n        .catch((err) => {\n          console.error(\"search_job: geocoding err:\", err);\n          done(err);\n        });\n    },\n    (done) => {\n      let values = [search_lat, search_lat, search_long, search_long];\n      let sql = \"SELECT job.*, company.* , industry.*, job_role.*, job_type.*, job_skill.*, job_schedule.*, skill_type.* \" +\n                  \"FROM job \" +\n                  \"JOIN company USING(company_id) \" +\n                  \"JOIN industry USING(industry_id) \" +\n                  \"JOIN job_role USING(job_role_id) \" +\n                  \"JOIN job_type USING(job_type_id) \" +\n                  \"LEFT JOIN job_schedule USING(job_schedule_id) \" +\n                  \"LEFT JOIN job_skill ON job_skill.job_id = job.job_id \" +\n                  \"LEFT JOIN skill_type ON job_skill.skill_type_id = skill_type.skill_type_id \"\n\n      if(search_industry && (search_industry.length || search_industry >= 1)) {\n        sql += \" AND company.industry_id IN (?) \";\n        values.push(search_industry);\n      }\n      if(search_string) {\n        sql += \" AND job.title LIKE ? \";\n        values.push('%' + search_string + '%');\n      }\n      if(search_job_type && (search_job_type.length || search_job_type >= 1)) {\n        sql += \" AND job.job_type_id IN (?) \";\n        values.push(search_job_type);\n      }\n      if (req.query.company_id) {\n        sql += \"WHERE company.company_id = '\" + String(req.query.company_id) + \"' \"\n      }\n      if (req.query.page_number > 1) {\n        sql += \" LIMIT \" + String(req.query.page_number*25) + \" OFFSET \"  + String((req.query.page_number-1)*25)\n      } \n      if(req.query.page_number) {\n        sql += \" LIMIT \" + String(req.query.page_number*25) \n      }\n\n      db.connectAndQuery({sql, values, nestTables: true}, (error, results) => {\n        console.log(results)\n        if(error) {\n          console.error(\"search_job: sql err:\", error);\n        } else {\n          result = _make_job_from_results(results);\n        }\n        done(error);\n      });\n    },\n  ],\n  (error) => {\n    if(error) {\n      res.sendStatus(500);\n    } else {\n      res.status(200).send(result);\n    }\n  });\n}\n\nfunction query_job(req,res) {\n  const search_location = req.body.location || req.query.location;\n  const search_string = req.body.search || req.query.search;\n  const search_industry = req.body.industry_id || req.query.industry_id;\n  const search_job_type = req.body.job_type_id || req.query.job_type_id;\n  let search_radius_label = req.body.radius || req.query.radius;\n\n  let search_lat;\n  let search_long;\n  let search_formatted;\n  let result;\n\n  if(Object.keys(LABEL_TO_RADIUS).indexOf(search_radius_label) < 0) {\n    search_radius_label = 'bike';\n  }\n\n  async.series([\n    (done) => {\n      geocoder.geocode(search_location)\n        .then((res) => {\n          search_formatted = res[0].formattedAddress;\n          search_lat = res[0].latitude;\n          search_long = res[0].longitude;\n          done();\n        })\n        .catch((err) => {\n          console.error(\"search_job: geocoding err:\", err);\n          done(err);\n        });\n    },\n    (done) => {\n      let values = [search_lat, search_lat, search_long, search_long];\n      let sql = \"SELECT job.*, company.* , industry.*, job_role.*, job_type.*, job_skill.*, job_schedule.*, skill_type.* \" +\n                  \"FROM job \" +\n                  \"JOIN company USING(company_id) \" +\n                  \"JOIN industry USING(industry_id) \" +\n                  \"JOIN job_role USING(job_role_id) \" +\n                  \"JOIN job_type USING(job_type_id) \" +\n                  \"LEFT JOIN job_schedule USING(job_schedule_id) \" +\n                  \"LEFT JOIN job_skill ON job_skill.job_id = job.job_id \" +\n                  \"LEFT JOIN skill_type ON job_skill.skill_type_id = skill_type.skill_type_id \"\n\n      if(search_industry && (search_industry.length || search_industry >= 1)) {\n        sql += \" AND company.industry_id IN (?) \";\n        values.push(search_industry);\n      }\n      if(search_string) {\n        sql += \" AND job.title LIKE ? \";\n        values.push('%' + search_string + '%');\n      }\n      if(search_job_type && (search_job_type.length || search_job_type >= 1)) {\n        sql += \" AND job.job_type_id IN (?) \";\n        values.push(search_job_type);\n      }\n      if (req.query.query) {\n        sql += \"WHERE ( UPPER(job.title) LIKE UPPER('\" + String(req.query.query) + \"') || \" +\n                        \"UPPER(company.name) LIKE UPPER('\" + String(req.query.query) + \"') || \" +\n                        \"UPPER(job_role.job_role_name) LIKE UPPER('\" + String(req.query.query) + \"') )\"\n      }\n      if (req.query.industry) {\n        sql += \"WHERE ( job.industry_id LIKE '\" + String(req.query.industry) + \"')\"\n      }      \n      if (req.query.page_number > 1) {\n        sql += \" LIMIT \" + String(req.query.page_number*25) + \" OFFSET \"  + String((req.query.page_number-1)*25)\n      } \n      if(req.query.page_number) {\n        sql += \" LIMIT \" + String(req.query.page_number*25) \n      }\n\n      db.connectAndQuery({sql, values, nestTables: true}, (error, results) => {\n        console.log(results)\n        if(error) {\n          console.error(\"search_job: sql err:\", error);\n        } else {\n          result = _make_job_from_results(results);\n        }\n        done(error);\n      });\n    },\n  ],\n  (error) => {\n    if(error) {\n      res.sendStatus(500);\n    } else {\n      res.status(200).send(result);\n    }\n  });\n}\n\nfunction get_joblist_length(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT count(*) FROM job \"\n  if (req.query.query) {\n    sql += \"WHERE ( UPPER(job.title) LIKE UPPER('\" + String(req.query.query) + \"') || \" +\n                    \"UPPER(company.name) LIKE UPPER('\" + String(req.query.query) + \"') || \" +\n                    \"UPPER(job_role.job_role_name) LIKE UPPER('\" + String(req.query.query) + \"') )\"\n  };\n  if (req.query.industry) {\n    sql += \"WHERE ( job.industry_id LIKE '\" + String(req.query.industry) + \"')\"\n  };\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      res.status(200).send(results);\n    }\n  });\n}\n\nfunction search_job(req, res) { \n  const search_location = req.body.location || req.query.location;\n  const search_string = req.body.search || req.query.search;\n  const search_industry = req.body.industry_id || req.query.industry_id;\n  const search_job_type = req.body.job_type_id || req.query.job_type_id;\n  let search_radius_label = req.body.radius || req.query.radius;\n\n  let search_lat;\n  let search_long;\n  let search_formatted;\n  let result;\n\n  if(Object.keys(LABEL_TO_RADIUS).indexOf(search_radius_label) < 0) {\n    search_radius_label = 'bike';\n  }\n\n  async.series([\n    (done) => {\n      geocoder.geocode(search_location)\n        .then((res) => {\n          search_formatted = res[0].formattedAddress;\n          search_lat = res[0].latitude;\n          search_long = res[0].longitude;\n          done();\n        })\n        .catch((err) => {\n          console.error(\"search_job: geocoding err:\", err);\n          done(err);\n        });\n    },\n    (done) => {\n      let values = [search_lat, search_lat, search_long, search_long];\n      let sql = \"SELECT job.*, company.* , job_role.*, job_type.*, job_skill.*, job_schedule.*, skill_type.* \" +\n                  \"FROM job \" +\n                  \"JOIN company USING(company_id) \" +\n                  \"JOIN job_role USING(job_role_id) \" +\n                  \"JOIN job_type USING(job_type_id) \" +\n                  \"LEFT JOIN job_schedule USING(job_schedule_id) \" +\n                  \"LEFT JOIN job_skill ON job_skill.job_id = job.job_id \" +\n                  \"LEFT JOIN skill_type ON job_skill.skill_type_id = skill_type.skill_type_id \"\n\n      // if(search_industry && (search_industry.length || search_industry >= 1)) {\n      //   sql += \" AND company.industry_id IN (?) \";\n      //   values.push(search_industry);\n      // }\n      if(search_string) {\n        sql += \" AND job.title LIKE ? \";\n        values.push('%' + search_string + '%');\n      }\n      if(search_job_type && (search_job_type.length || search_job_type >= 1)) {\n        sql += \" AND job.job_type_id IN (?) \";\n        values.push(search_job_type);\n      }\n\n      sql += \" LIMIT \" + String(req.query.page_number*25) + \" OFFSET \"  + String((req.query.page_number-1)*25)\n\n      db.connectAndQuery({sql, values, nestTables: true}, (error, results) => {\n        if(error) {\n          console.error(\"search_job: sql err:\", error);\n        } else {\n          result = _make_job_from_results(results);\n        }\n        done(error);\n      });\n    },\n  ],\n  (error) => {\n    if(error) {\n      res.sendStatus(500);\n    } else {\n      res.status(200).send(result);\n    }\n  });\n}\n// function get_employee_jobs(req, res) {\n//   const sql = \"select * from job\"\n//   // const sql = \"SELECT employee_job.*, job.* FROM employee_job JOIN job USING(job_id) WHERE employee_id = ?\";\n//   // const values = [req.user.employee_id];\n//   const values = [1];\n\n//   db.connectAndQuery({sql, values}, (error, results) => {\n//     if(error) {\n//       console.error(\"get_employee_jobs: sql err:\", error);\n//       res.sendStatus(500);\n//     } else if(results.length < 1) {\n//       res.sendStatus(404);\n//     } else {\n//       res.status(200).send(results)\n//     }\n//   });\n// }\n\nfunction create_employee_job(req, res) {\n  const employee_id = req.user.employee_id;\n  const job_id = req.body.job_id;\n  const interview_date = req.body.interview_date;\n  let status = req.body.status;\n\n  if(EMPLOYEE_JOB_STATUS.indexOf(status) < 0) {\n    status = NULL;\n  }\n\n  const sql = \"INSERT INTO employee_job SET ?\";\n  const values = { employee_id, job_id, status, interview_date };\n\n  db.connectAndQuery({sql, values}, (error, results) => {\n    if(error) {\n      console.error(\"create_employee_job: sql err:\", error);\n      res.sendStatus(500);\n    } else {\n      res.status(200).send({id: results.insertId});\n    }\n  });\n}\nfunction update_employee_job(req, res) {\n  const employee_job_id = req.params.employee_job_id;\n  const interview_date = req.body.interview_date || NULL;\n  let job_status = req.body.status;\n\n  if(EMPLOYEE_JOB_STATUS.indexOf(job_status) < 0) {\n    job_status = NULL;\n  }\n\n  const sql = \"UPDATE employee_job SET status = ?, interview_date = ? WHERE employee_job_id = ? AND employee_id = ?\";\n  const values = [job_status, interview_date, employee_job_id, req.user.employee_id];\n  db.connectAndQuery({sql, values}, (error, results) => {\n    if(error) {\n      console.error(\"update_employee_job: sql err:\", error);\n      res.sendStatus(500);\n    } else if(results.affectedRows < 1) {\n      res.sendStatus(404);\n    } else {\n      res.sendStatus(200);\n    }\n  });\n}\nfunction delete_employee_job(req, res) {\n  const sql = \"DELETE FROM employee_job WHERE employee_job_id = ? AND employee_id = ?\";\n  const values = [req.params.employee_job_id, req.user.employee_id];\n  db.connectAndQuery({sql, values}, (error, results) => {\n    if(error) {\n      console.error(\"delete_employee_job: sql err:\", error);\n      res.sendStatus(500);\n    } else if(results.affectedRows < 1) {\n      res.sendStatus(404);\n    } else {\n      res.sendStatus(200);\n    }\n  });\n}\n\n//**\n//Imported from client/noauth/job.js\n\nconst JOB_KEYS = [\n  'job_id',\n  'company_id',\n  'employer_id',\n  'title',\n  'pay_rate_min',\n  'pay_rate_max',\n  'job_schedule_id',\n  'min_gpa',\n  'school_level_id',\n  'description',\n  'responsibilities',\n  'activities',\n  'is_yobs_client',\n  'external_url',\n  'posted_at',\n  'takedown_at',\n  'is_deleted',\n  'location',\n  'latitude',\n  'longitude',\n  'industry_id',\n];\nconst COMPANY_KEYS = [\n  'company_id',\n  'name',\n  'email_domain',\n  'property_bag',\n  'is_deleted',\n];\nconst JOB_ROLE_KEYS = [\n  'job_role_id',\n  'job_role_name',\n  'job_role_descr'\n];\nconst JOB_TYPE_KEYS = [\n  'job_type_id',\n  'job_type_name',\n  'job_type_descr'\n];\nconst SKILL_KEYS = [\n  'skill_type_id',\n  'skill_type_name',\n  'skill_type_desc'\n];\nconst LABEL_TO_RADIUS = {\n  walk: 1.25,\n  bike: 4,\n  metro: 8,\n  car: 8\n};\n\nfunction _make_job_from_results(results) {\n  let result = [];\n  let job_ids = {}\n\n  if(results.length) {\n    _.each(results, (a_result) => {\n      if(!job_ids[a_result.job.job_id]) {\n        job_ids[a_result.job.job_id] = true;\n\n        let job      = _.pick(a_result.job, JOB_KEYS);\n        let job_role = _.pick(a_result.job_role, JOB_ROLE_KEYS);\n        let job_type = _.pick(a_result.job_type, JOB_TYPE_KEYS);\n        let company  = _.pick(a_result.company, COMPANY_KEYS);\n        let skills   = [];\n\n        company.property_bag = JSON.parse(company.property_bag);\n\n        _.each(results, (r) => {\n          if(r.job.job_id == r.job_skill.job_id) {\n            const skill_def = _.pick(r.skill_type, SKILL_KEYS);\n            skill_def.push(r.job_skill.job_skill_id)\n            skills.push(skill_def);\n          }\n        });\n\n        result.push({\n          job: Object.assign({}, job, job_role, job_type),\n          industry: a_result.industry,\n          job_schedule: a_result.job_schedule,\n          company,\n          skills,\n        });\n      }\n    });\n  }\n\n  return result;\n}\n"]}