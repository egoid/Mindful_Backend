{"version":3,"sources":["../../../../routes/client/noauth/applied_jobs.js"],"names":["_","require","async","express","db","router","Router","exports","post","create_applied_jobs","update_applied_jobs","delete","delete_applied_jobs","_extract_job_def","req","company_id","body","applied_job_id","applied_job_type_id","employer_id","user","employee_id","status","reviewed_by_id","res","sendStatus","job_values","connection","series","done","getConnection","error","conn","console","queryWithConnection","columns","values","each","Object","keys","column_name","count","push","sql","join","repeat","length","slice","results","insertId","commit","result","rollback","send","applied_job_values","params","connectAndQuery","affectedRows","id"],"mappings":"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","file":"applied_jobs.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst async = require('async');\nconst express = require('express');\nconst db = require('../../../../mysql_db_prod.js');\n\nconst router = new express.Router();\nexports.router = router;\n\n/**\n *  ROUTES\n */\nrouter.post('/1/applied_jobs', create_applied_jobs);\nrouter.post('/1/applied_jobs/:applied_jobs_id', update_applied_jobs);\nrouter.delete('/1/applied_jobs/:applied_jobs_id', delete_applied_jobs);\n\n\n/**\n * Description:  Applied jobs parameters from the request\n * @param req\n * @returns {{company_id: *, applied_job_id: *, applied_job_type_id: *, employer_id: *, employee_id: *, status, reviewed_by_id: *}}\n * @private\n */\nfunction _extract_job_def(req) {\n    return {\n\tcompany_id: req.body.company_id,\n\tapplied_job_id: req.body.applied_job_id,\n\tapplied_job_type_id: req.body.applied_job_type_id,\n\temployer_id: req.user.employer_id,\n\temployee_id: req.user.employee_id,\n\tstatus: req.user.status,\n\treviewed_by_id: req.user.reviewed_by_id\n\t\n    };\n}\n\nfunction create_applied_jobs(req, res) {\n\n    if (!req.user.applied_job_id && !req.user.employer_id) {\n\tres.sendStatus(400);\n\treturn;\n    }\n    \n    const job_values = _extract_job_def(req);\n    let connection;\n    \n    async.series([\n\t    (done) => {\n\t\tdb.getConnection((error, conn) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_applied_jobs: sql err:\", error);\n\t\t    }\n\t\t    connection = conn;\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\t\n\t\tdb.queryWithConnection(connection, \"START TRANSACTION\", [], (error) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_applied_jobs: sql err:\", error);\n\t\t    }\n\t\t    done(error);\n\t\t});\n\t    },\n\t    (done) => {\n\t\t\n\t\tconst columns = [];\n\t\tconst values = [];\n\t\t\n\t\t_.each(Object.keys(job_values), (column_name, count) => {\n\t\t    columns.push(column_name);\n\t\t    values.push(job_values[column_name]);\n\t\t});\n\t\t\n\t\tconst sql = \"INSERT INTO applied_jobs (\" + columns.join(',') + \")\" + \" VALUES (\" + \"?,\".repeat(values.length).slice(0, -1) + \")\";\n\t\tdb.queryWithConnection(connection, sql, values, (error, results) => {\n\t\t    if (error) {\n\t\t\tconsole.error(\"create_applied_jobs: sql err:\", error);\n\t\t    }\n\t\t    done(error, results.insertId);\n\t\t});\n\t\t\n\t    },\n\t    (done) => {\n\t\tdb.commit(connection, done);\n\t    },\n\t],\n\t(error, result) => {\n\t    if (error) {\n\t\tdb.rollback(connection, () => {});\n\t\tconsole.error(\"create_applied_jobs: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tres.status(200).send(result);\n\t    }\n\t});\n}\nfunction update_applied_jobs(req, res) {\n    const applied_job_values = _extract_job_def(req);\n    const applied_job_id = req.params.applied_job_id;\n    \n    if (!applied_job_values.company_id || !applied_job_values.applied_job_type_id) {\n\tres.status(400).send(\"When updating a job, company, job roles, and job types cannot be created.\");\n    } else {\n\tconst sql = \"UPDATE applied_jobs SET ? WHERE applied_job_id = ? AND employer_id = ?\";\n\tdb.connectAndQuery({sql, values: [applied_job_values, applied_job_id, req.user.employer_id]}, (error, results) => {\n\t    if (error) {\n\t\tconsole.error(\"update_applied_jobs: sql err:\", error);\n\t\tres.sendStatus(500);\n\t    } else {\n\t\tif (results.affectedRows < 1) {\n\t\t    res.sendStatus(404);\n\t\t} else {\n\t\t    res.status(200).send({id: applied_job_id});\n\t\t}\n\t    }\n\t});\n    }\n}\nfunction delete_applied_jobs(req, res) {\n    const values = [req.params.applied_job_id, req.user.employer_id];\n    const sql = \"DELETE FROM applied_jobs WHERE applied_job_id = ? AND employer_id = ?\";\n    db.connectAndQuery({sql, values}, (error, results) => {\n\tif (error) {\n\t    console.error(\"delete_applied_jobs: sql err:\", error);\n\t    res.sendStatus(500);\n\t} else if (results.affectedRows < 1) {\n\t    res.sendStatus(404);\n\t} else {\n\t    res.sendStatus(200);\n\t}\n    });\n}\n"]}