{"version":3,"sources":["../../../routes/admin/raw_job.js"],"names":["_","require","express","db","router","Router","exports","get","get_job_list","get_live_list","query_database","put","edit_job","get_role_list","get_company_list","get_industry_list","get_skill_list","get_employer_list","get_schedule_list","get_job_type_list","req","res","values","sql","String","query","replace","console","log","connectAndQuery","error","results","sendStatus","status","send","category","job_category","push","sorted","i","r","this_job","body","criteria","arg_map","job_id","update_job","id","params","job_type"],"mappings":"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","file":"raw_job.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst express = require('express');\nconst db = require('../../mysql_db.js');\n\nconst router = new express.Router();\nexports.router = router;\n\nrouter.get('/1/raw_jobs/job_list/', get_job_list);\nrouter.get('/1/raw_jobs/live_list/', get_live_list);\nrouter.get('/1/raw_jobs/query/', query_database);\nrouter.put('/1/raw_jobs/job_list/', edit_job);\n\nrouter.get('/1/raw_jobs/role_list/', get_role_list);\nrouter.get('/1/raw_jobs/company_list/', get_company_list);\nrouter.get('/1/raw_jobs/industry_list/', get_industry_list);\nrouter.get('/1/raw_jobs/skill_list/', get_skill_list);\nrouter.get('/1/raw_jobs/employer_list/', get_employer_list);\nrouter.get('/1/raw_jobs/schedule_list/', get_schedule_list);\nrouter.get('/1/raw_jobs/job_type_list/', get_job_type_list);\n// router.put('/1/raw_jobs/:id', update_job);\n\nfunction query_database(req, res) {\n  const values = [];\n  let sql = String(req.query.query).replace(/\\>/g , ' ')\n  console.log(sql)\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      res.status(200).send(results);\n    }\n  });\n}\n\nfunction get_job_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"select job_title, job_summ, company, job_loc, salary, job_desc, url, post_date, expiry_date, job_available, search_keyword, search_zip from raw_jobs_2017 group by job_desc\"\n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\n\nfunction get_live_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * from job\" \n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {  \n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\nfunction edit_job(req, res) {\n  const this_job = req.body;\n  var criteria = this_job['edit_criteria_string']\n  const arg_map = {}\n  arg_map[criteria] = this_job[criteria]\n  console.log(arg_map)\n  const sql = \"UPDATE job SET ? WHERE job_id = ? \" \n  const values = [ arg_map , this_job.job_id ]\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      res.status(200).send(results);\n    }\n  });\n\n};\n\nfunction get_industry_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * from industry\" \n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\nfunction get_skill_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * from job_skill\" \n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\nfunction get_employer_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * from employer\" \n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\nfunction get_schedule_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * from job_schedule\" \n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\n\nfunction get_job_type_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * from job_type\" \n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\n\n\n\nfunction get_role_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * from job_role\" \n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\n\nfunction get_company_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * from company\" \n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = [];\n      for(let i in results){\n        let r = results[i];\n        sorted.push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\nfunction update_job(req, res) {\n  const sql = \"SELECT * FROM `raw_jobs`\";\n  const id = req.params.id;\n  const values = [req.query.job_type];\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      res.status(200).send(results);\n    }\n  });\n}\n\n/*\n---DO NOT UNCOMMENT---\n\n\nconst imported = require('../../Associates.json');\nconst fields = '(job_title, company, job_loc, job_summ, salary, job_desc, url, post_date, expiry_date, job_available, job_category)';\nconst sql = 'INSERT into `raw_jobs` '+ fields +' VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\nfor(let i in imported){\n  let doc = imported[i];\n  delete doc.id;\n  doc.job_category = 'Associates';\n  let values = [doc.job_title, doc.company, doc.job_loc, doc.job_summ, doc.salary, doc.job_desc, doc.url, doc.post_date, doc.expiry_date, doc.job_available, doc.job_category];\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n    } else {\n      console.log('Saved '+doc.job_title);\n    }\n  });\n}*/\n"]}