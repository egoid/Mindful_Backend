{"version":3,"sources":["../../../routes/admin/live_job.js"],"names":["_","require","express","db","router","Router","exports","get","get_live_job_list","post","publish_live_job","put","update_job","req","res","job_details","body","console","log","industry_id","sql","values","company_id","job_role_id","job_title","job_loc","job_desc","job_summ","url","post_date","slice","expiry_date","connectAndQuery","error","results","sendStatus","status","send","insertId","category","query","job_category","push","sorted","i","r","id","params","job_type"],"mappings":"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","file":"live_job.js","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst express = require('express');\nconst db = require('../../mysql_db.js');\n\nconst router = new express.Router();\nexports.router = router;\n\nrouter.get('/1/live_jobs', get_live_job_list);\nrouter.post('/1/live_jobs', publish_live_job);\nrouter.put('/1/live_jobs/:id', update_job);\n\nfunction publish_live_job(req, res) {\n  const job_details = req.body;\n  console.log(job_details.industry_id)\n  const sql = \"INSERT INTO job (latitude_lower_walk, longitude_lower_walk, latitude_upper_walk, longitude_upper_walk, latitude_lower_bike, longitude_lower_bike, latitude_upper_bike, longitude_upper_bike, latitude_lower_metro, longitude_lower_metro, latitude_upper_metro, longitude_upper_metro, latitude_lower_car, longitude_lower_car, latitude_upper_car, longitude_upper_car, company_id, employer_id, is_deleted, job_role_id, job_type_id, job_schedule_id, title, location, description, responsibilities, activities, is_yobs_client, external_url, posted_at, deleted_at , industry_id ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\";\n  const values = [34.0341, -118.222, 34.0341, -118.222, 34.0341, -118.222, 34.0341, -118.222, 34.0341, -118.222, 34.0341, -118.222, 34.0341, -118.222, 34.0341, -118.222, job_details.company_id , 1, 0, job_details.job_role_id, 1, 1, job_details.job_title, job_details.job_loc, job_details.job_desc, job_details.job_desc, job_details.job_summ, 0, job_details.url, job_details.post_date.slice(0,10) , job_details.expiry_date.slice(0,10) , job_details.industry_id ];\n  db.connectAndQuery({sql, values}, (error, results) => {\n    console.log(results)\n    if(error) {\n      console.error(\"post_new_job: sql err:\", error);\n      res.sendStatus(500);\n    } else {\n      \n      res.status(200).send({'id' : results.insertId });\n    }\n  });\n}\n\nfunction get_live_job_list(req, res) {\n  const category = req.query.job_category;\n  const values = [];\n  let sql = \"SELECT * FROM `job`\";\n  if(category){\n    sql += ' WHERE `job_category`= ?';\n    values.push(category);\n  }\n\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      const sorted = {};\n      for(let i in results){\n        let r = results[i];\n        if(!sorted[r.job_category]){\n          sorted[r.job_category] = [];\n        }\n        sorted[r.job_category].push(r);\n      }\n      res.status(200).send(sorted);\n    }\n  });\n}\n\nfunction update_job(req, res) {\n  const sql = \"SELECT * FROM `live_jobs`\";\n  const id = req.params.id;\n  const values = [req.query.job_type];\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n      res.sendStatus(500);\n    } else {\n      res.status(200).send(results);\n    }\n  });\n}\n\n/*\n---DO NOT UNCOMMENT---\n\n\nconst imported = require('../../Associates.json');\nconst fields = '(job_title, company, job_loc, job_summ, salary, job_desc, url, post_date, expiry_date, job_available, job_category)';\nconst sql = 'INSERT into `raw_jobs` '+ fields +' VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\nfor(let i in imported){\n  let doc = imported[i];\n  delete doc.id;\n  doc.job_category = 'Associates';\n  let values = [doc.job_title, doc.company, doc.job_loc, doc.job_summ, doc.salary, doc.job_desc, doc.url, doc.post_date, doc.expiry_date, doc.job_available, doc.job_category];\n  db.connectAndQuery({ sql, values }, (error, results) => {\n    if(error) {\n      console.error(error);\n    } else {\n      console.log('Saved '+doc.job_title);\n    }\n  });\n}*/\n"]}